{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Zip","require","fromEvent","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tree","data","zip","files","Modal","info","title","content","react_default","a","createElement","onOk","parseTreeView","leaves","console","log","getLeaves","zipFile","_this2","map","file","directories","getListFolders","getFolderPath","folder","name","generateAsync","type","then","saveAs","_this3","directoryList","fileObj","id","preview","text","isLeaf","build","setState","Array","isArray","length","directoryObj","getDirectoryObj","push","children","directory","shift","join","filter","object","fileName","path","replace","directoryPath","split","item","actionButton","buttonName","api","refs","treeview","removeItem","_this4","forEach","branch","actionButtons","trash_o_default","size","color","className","src","logo","alt","es","getDataTransferItems","evt","onDrop","bind","deni_react_treeview_default","items","ref","selectRow","onActionButtonClick","es_button","onClick","submitFiles","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83321560.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Dropzone from 'react-dropzone';\nimport saveAs from 'file-saver';\nimport TreeView from 'deni-react-treeview';\nimport { Modal, Button } from 'antd';\n\nimport FaTrashO from 'react-icons/lib/fa/trash-o';\n\nconst Zip = require('jszip');\nconst { fromEvent } = require('file-selector');\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      tree: null,\n      data: []\n    }\n    this.zip = new Zip();\n  }\n\n  componentDidMount() {\n  }\n\n  onDrop(files) {\n\n    Modal.info({\n      title: 'This is a notification message',\n      content: (\n        <div>\n          <p>some messages...some messages...</p>\n          <p>some messages...some messages...</p>\n        </div>\n      ),\n      onOk() {},\n    });\n\n\n\n    this.parseTreeView(files);\n  }\n\n  submitFiles() {\n    let leaves = [];\n    console.log(this.state.data);\n    this.zip = new Zip();\n    this.getLeaves(leaves, this.state.data);\n    this.zipFile(leaves);\n  }\n\n  zipFile(files) {\n    files.map((file) => {\n      let directories = this.getListFolders(this.getFolderPath(file));\n      let zip = this.zip;\n      directories.map(folder => {\n        zip = zip.folder(folder);\n      })\n      zip.file(file.name, file);\n    });\n    this.zip.generateAsync({ type: \"blob\" })\n      .then(function (content) {\n        saveAs(content, \"example.zip\");\n      });\n  }\n\n  parseTreeView(files) {\n    let tree = [];\n    files.map(file => {\n      let directoryList = this.getListFolders(this.getFolderPath(file));\n      let fileObj = {\n        id: file.preview,\n        text: file.name,\n        isLeaf: true,\n        data: file\n      };\n      this.build(tree, directoryList, fileObj);\n    });\n    this.setState({ data: tree });\n    return tree;\n  }\n\n  build(tree, directories, file) {\n    if (Array.isArray(directories) && directories.length === 1) {\n      let directoryObj = this.getDirectoryObj(tree, directories[0]);\n      if (directoryObj === null) {\n        tree.push({\n          id: directories[0],\n          text: directories[0],\n          children: [file]\n        });\n      } else if (!('children' in directoryObj)) {\n        directoryObj.children = [file];\n      } else {\n        directoryObj.children.push(file);\n      }\n    } else {\n      let directory = directories.shift();\n      let directoryObj = this.getDirectoryObj(tree, directory);\n      if (directoryObj === null) {\n        directoryObj = {\n          id: directories.join() + ',' + directory,\n          text: directory,\n          children: []\n        };\n        tree.push(directoryObj);\n      }\n      this.build(directoryObj.children, directories, file);\n    }\n  }\n\n  getDirectoryObj(tree, directory) {\n    let directories = tree.filter(object => { return object.text === directory });\n    return directories.length > 0 ? directories[0] : null;\n  }\n\n  getFolderPath(file) {\n    let fileName = file.name;\n    let directoryPath = file.path.replace(fileName, '');\n    return directoryPath;\n  }\n\n  getListFolders(directoryPath) {\n    return directoryPath.split('/').filter(folder => folder.length > 0);\n  }\n\n  onActionButtonClick(item, actionButton) {\n    const buttonName = actionButton.type.name;\n    let api = this.refs.treeview.api;\n    switch (buttonName) {\n      case 'FaTrashO':\n        if (item) api.removeItem(item.id);\n        break;\n      default:\n    }\n  }\n\n  getLeaves(leaves, tree) {\n    tree.forEach(branch => {\n      if (branch.isLeaf) {\n        leaves.push(branch.data);\n      } else {\n        this.getLeaves(leaves, branch.children);\n      }\n    });\n  }\n\n  render() {\n    const actionButtons = [\n      (<FaTrashO size=\"15\" color=\"#ff704d\" />)\n    ];\n\n    return (\n      <div className=\"App\">\n        <header>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n\n        <div className=\"dropzone\">\n          <Dropzone\n            getDataTransferItems={evt => fromEvent(evt)}\n            onDrop={this.onDrop.bind(this)}\n          >\n            <p>Drop a folder with files here.</p>\n          </Dropzone>\n        </div>\n        <aside>\n          <TreeView\n            items={this.state.data}\n            ref=\"treeview\"\n            selectRow={true}\n            actionButtons={actionButtons}\n            onActionButtonClick={this.onActionButtonClick.bind(this)}\n          />\n        </aside>\n        <Button onClick={this.submitFiles.bind(this)}>Submit</Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}